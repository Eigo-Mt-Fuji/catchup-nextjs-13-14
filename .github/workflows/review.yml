name: run
on:
  pull_request:
jobs:
  review_for_me:
    runs-on: ubuntu-latest
    environment: default
    strategy:
      matrix:
        node-version: ['21.x']
    steps:

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Use node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    # コミットメントの属性抽出 -> レビュー観点 -> AIレビュー依頼内容 -> 
      # 人のレビューコメントをAIに学習させるプロセスの定義を考えた方が良いのでは?
        # チーム内の独自のレビュー観点を新規参画した人も含めて効率的に伝搬させる
        # システムトラブルを引き起こす重要な問題を未然に防ぐ目的
        # 初学者層のフォロー
        # 熟練者層のフォロー
        # 復帰した人たちのフォロー
          # 最近のハイライトを伝える経路はあるか?
      # 20年後の開発プロセス・レビュープロセスを考えてみる
        # 1年後
          #初回はAIのレビュー
          #機能追加開発はプロジェクトルールに基づいた自動レビュー
        # 5年後
          # AIレビューの業界標準が出来上がる -> どんな団体が業界標準を作る?
        # 10年後
          # AIレビューの業界標準が浸透する
          # AIレビューの業界標準の推進活動が活発化する -> どんな団体が推進活動を行なってる
        # 20年後
          # AI主体の自動ソフトウェア開発が主流になる・人間は受け入れテストに集中する
    # OK/NG
      # AIのレビュー観点の方向性をちょっといい感じに調整する
        # こういうコメントは不要
        # 良い点
        # チーム内の参考指摘（いつ、どのファイル）
        # 他の人
      # レビュー観点の定義
        # どういうレビューなら良い?
        # どういうレビューなら悪い? (逆効果、合っても仕方ない)
        # どんな時にレビューを依頼したくなる? ( 横展開 )
    # golang
      # file 拡張子
      # folder(アーキテクチャが決まってる場合、部品の階層)
      # インポートしてるパッケージ
      # コミットのコメント
      # ブランチ名
      # PullRequest名
    # next.js
      # file 拡張子
      # folder(アーキテクチャが決まってる場合、部品の階層)
      # インポートしてるパッケージ
      # コミットのコメント
      # ブランチ名
      # PullRequest名
    - name: Review
      env:
        OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd ./scripts/reviewer/
        echo $OPENAI_API_KEY
        npm install
        npm run build
        git diff --diff-filter=d  --name-only origin/${{ github.base_ref }}..HEAD ../../src | grep -e '\.tsx$' -e '\.ts$' | while read file; do
          git diff origin/${{ github.base_ref }}..HEAD "../../${file}"
          review_result=$(git diff origin/${{ github.base_ref }}..HEAD "../../${file}" | OPENAI_API_KEY="$OPENAI_API_KEY" npm run start ../../${file})
          gh pr comment ${{ github.event.pull_request.number }} --body "${review_result}"
        done
